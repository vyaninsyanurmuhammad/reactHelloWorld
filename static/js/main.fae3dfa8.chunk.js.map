{"version":3,"sources":["logo.svg","config/firebase/index.js","containers/form/index.js","containers/todo/index.js","containers/todoList/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Form","useState","title","setTitle","type","onChange","e","target","value","onClick","todoRef","database","ref","todo","complete","push","Todo","className","child","id","remove","update","TodoList","todoList","setTodoList","useEffect","on","snapshot","todos","val","map","index","key","App","src","logo","alt","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iHAAAA,EAAOC,QAAU,IAA0B,kC,8LCa3CC,IAASC,cAXY,CACjBC,OAAQ,0CACRC,WAAY,wCACZC,YAAa,+CACbC,UAAW,wBACXC,cAAe,oCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKJT,QAAf,ECZO,SAASU,IAAQ,IAAD,EACOC,mBAAS,IADhB,mBACZC,EADY,KACLC,EADK,KAiBnB,OAAQ,6BACJ,2BAAOC,KAAK,OAAOC,SAfA,SAACC,GACpBH,EAASG,EAAEC,OAAOC,QAc2BA,MAAON,IACpD,4BAAQO,QAZO,WACf,IAAMC,EAAUpB,EAASqB,WAAWC,IAAI,QAClCC,EAAO,CACXX,QACAY,UAAU,GAGZJ,EAAQK,KAAKF,KAKb,gB,YCjBO,SAASG,EAAT,GAAyB,IAATH,EAAQ,EAARA,KAW7B,OACE,6BACE,wBAAII,UAAWJ,EAAKC,SAAW,WAAa,IAAKD,EAAKX,OACtD,4BAAQO,QAbO,WACDnB,EAASqB,WAAWC,IAAI,QAAQM,MAAML,EAAKM,IACnDC,WAWN,UACA,4BAAQX,QAVS,WACHnB,EAASqB,WAAWC,IAAI,QAAQM,MAAML,EAAKM,IACnDE,OAAO,CACbP,UAAWD,EAAKC,aAOhB,aChBC,SAASQ,IAAY,IAAD,EACSrB,qBADT,mBAChBsB,EADgB,KACNC,EADM,KAevB,OAZAC,qBAAU,WACUnC,EAASqB,WAAWC,IAAI,QAChCc,GAAG,SAAS,SAACC,GACjB,IAAMC,EAAQD,EAASE,MACjBN,EAAW,GACjB,IAAK,IAAIJ,KAAMS,EACXL,EAASR,KAAT,aAAgBI,MAAOS,EAAMT,KAEjCK,EAAYD,QAEjB,IAGC,6BACGA,EACGA,EAASO,KAAI,SAACjB,EAAMkB,GAAP,OAAiB,kBAACf,EAAD,CAAMH,KAAMA,EAAMmB,IAAKD,OACrD,ICGCE,MApBf,WACE,OACE,yBAAKhB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKiB,IAAKC,IAAMlB,UAAU,WAAWmB,IAAI,SACzC,kBAACpC,EAAD,MACA,kBAACsB,EAAD,MACA,uBACEL,UAAU,WACVoB,KAAK,sBACL9B,OAAO,SACP+B,IAAI,uBAJN,kBCDYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fae3dfa8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import firebase from 'firebase';\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyDKfSdeI7X93WIr-HXqNTB6lIB17qoIJE0\",\r\n    authDomain: \"reacthelloworld-ccab7.firebaseapp.com\",\r\n    databaseURL: \"https://reacthelloworld-ccab7.firebaseio.com\",\r\n    projectId: \"reacthelloworld-ccab7\",\r\n    storageBucket: \"reacthelloworld-ccab7.appspot.com\",\r\n    messagingSenderId: \"439523584756\",\r\n    appId: \"1:439523584756:web:6898d5ff453b603fd18ca1\",\r\n    measurementId: \"G-TDHFCX4BVB\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React, {useState} from 'react';\r\nimport firebase from '../../config/firebase'\r\n\r\nexport function Form() {\r\n    const [title, setTitle] = useState('');\r\n\r\n    const handleOnChange = (e) => {\r\n        setTitle(e.target.value);\r\n      };\r\n\r\n    const createTodo = () =>{\r\n        const todoRef = firebase.database().ref('List');\r\n        const todo = {\r\n          title,\r\n          complete: false,\r\n        };\r\n    \r\n        todoRef.push(todo);\r\n    }\r\n\r\n    return (<div>\r\n        <input type=\"text\" onChange={handleOnChange} value={title} />\r\n        <button onClick={createTodo}>Add to List</button>\r\n    </div>);\r\n}","\r\nimport React from 'react';\r\nimport firebase from '../../config/firebase';\r\nimport '../../App.css';\r\n\r\nexport default function Todo({ todo }) {\r\n  const deleteTodo = () => {\r\n    const todoRef = firebase.database().ref('List').child(todo.id);\r\n    todoRef.remove();\r\n  };\r\n  const completeTodo = () => {\r\n    const todoRef = firebase.database().ref('List').child(todo.id);\r\n    todoRef.update({\r\n      complete: !todo.complete,\r\n    });\r\n  };\r\n  return (\r\n    <div>\r\n      <h1 className={todo.complete ? 'complete' : ''}>{todo.title}</h1>\r\n      <button onClick={deleteTodo}>Delete</button>\r\n      <button onClick={completeTodo}>Complete</button>\r\n    </div>\r\n  );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport Todo from \"../todo\";\r\nimport firebase from '../../config/firebase'\r\n\r\nexport function TodoList() {\r\n    const [todoList, setTodoList] = useState();\r\n\r\n    useEffect(() => {\r\n        const todoRef = firebase.database().ref('List');\r\n        todoRef.on('value', (snapshot) => {\r\n            const todos = snapshot.val();\r\n            const todoList = [];\r\n            for (let id in todos) {\r\n                todoList.push({ id, ...todos[id] });\r\n            }\r\n            setTodoList(todoList);\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n          {todoList\r\n            ? todoList.map((todo, index) => <Todo todo={todo} key={index} />)\r\n            : ''}\r\n        </div>\r\n      );\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Form } from './containers/form';\nimport { TodoList } from './containers/todoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Form/>\n        <TodoList></TodoList>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}